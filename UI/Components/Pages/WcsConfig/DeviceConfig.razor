@page "/DeviceConfig"
@using System.Reflection
@using UI.Model.Device
@using UI.Service.DeviceService
@inject IDeviceService _DeviceService
@inject IMessageService _message;

<PageTitle>DeviceConfig</PageTitle>

<div>
    <Row Class="ant-table-tbody" Style="display: flex; justify-content: space-between; margin:5px">
        <AntDesign.Col Flex="1">
            <Button Type="ButtonType.Primary" Style="margin-top:20px" @onclick="_ => LoadTableData()">重新加载</Button>
        </AntDesign.Col>
        <AntDesign.Col Flex="1">
            <Button Type="ButtonType.Primary" Style="margin-top:20px" @onclick="_ => TaskDetailPanelOpen()">
                添加
            </Button>
        </AntDesign.Col>
        <AntDesign.Col Flex="8">
            <div Style="margin-top:20px">
                <Text>名称</Text>
                <Input Placeholder="请输入" TValue="string" width="160px"/>
            </div>
        </AntDesign.Col>

        <AntDesign.Col Flex="1">
            <Button Type="ButtonType.Primary" Style="margin-top:20px">查询</Button>
        </AntDesign.Col>
    </Row>
    <Row Style="display: flex;margin-top: 30px; flex-direction: column; height: calc(100vh - 150px);">
        <Table DataSource="data" PageSize="10" ScrollX="1200" StickyOffsetHeader="64" Class="my-table">
            <PropertyColumn Property="c => c.DeviceName" Width="200" Title="名称"/>
            <PropertyColumn Property="c => c.Description" Width="160" Title="描述"/>
            <PropertyColumn Property="c => c.DeviceType" Width="160" Title="类型"/>
            <PropertyColumn Property="c => c.Enable" Width="160" Title="是否启用"/>
            <PropertyColumn Property="c => c.Config" Width="160" Title="配置"/>
            <PropertyColumn Property="c => c.RegionCode" Width="160" Title="区域编码"/>
            <PropertyColumn Property="c => c.CreationTime" Width="160" Title="创建时间"/>
            <PropertyColumn Property="c => c.LastModifierUser" Width="160" Title="修改人"/>
            <PropertyColumn Property="c => c.LastModificationTime" Width="160" Title="修改人时间"/>
        </Table>
    </Row>
</div>
<div>
    <Drawer Closable="true" Width="420"
            Visible="DrawerVisible" Title='"面板"' OnClose="_ => TaskDetailPanelClose()">
        <Template style="height:90%">
            <Row Gutter="18">
                <AntDesign.Col Span="12">
                    <Text>名称：</Text>
                    <Input Placeholder="请输入" @bind-Value="@select.DeviceName" TValue="string"/>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>区域编码：</Text>
                    <Input Placeholder="请输入" @bind-Value="@select.RegionCodes" TValue="string"/>
                </AntDesign.Col>
            </Row>
            <Row Gutter="18">
                <AntDesign.Col Span="12">
                    <Text>设备类型：</Text>
                    <div>
                        <Cascader Options="@deviceOptions" @bind-Value="DeviceSelectValue"
                                  SelectedNodesChanged="OnChange" ChangeOnSelect="true">
                        </Cascader>
                    </div>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Checkbox @bind-Value="select.Enable" Style="margin-top: 20px;">是否启用</Checkbox>
                </AntDesign.Col>
            </Row>
            <Row Gutter="18">
                <AntDesign.Col Span="12">
                    <Text>描述：</Text>
                    <Input Placeholder="请输入" @bind-Value="@select.Description" TValue="string"/>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>设备组：</Text>
                    <Input Placeholder="请输入" @bind-Value="@select.GroupName" TValue="string"/>
                </AntDesign.Col>
            </Row>
            <div/>
            <Row Gutter="18" Style="margin-top: 20px">
                <AntDesign.Col Span="12">
                    <Text>配置信息</Text>
                    @foreach (var property in Properties)
                    {
                        <div class="mb-3">
                            <label class="form-label">@property.Name</label>
                            <input value="@GetValue(property)" @onchange="args => OnChanged(args, property)"/>
                        </div>
                    }
                </AntDesign.Col>
            </Row>

            <Row>
                <AntDesign.Col Span="18">
                </AntDesign.Col>
                <AntDesign.Col Span="6">
                    <Button Type="ButtonType.Primary" @onclick="_ => Commit()">提交</Button>
                </AntDesign.Col>
            </Row>
        </Template>
    </Drawer>
</div>
<style>
    /* 在 wwwroot/css/site.css 或组件样式部分添加 */
    .my-table .ant-table-tbody > tr:nth-child(odd) > td {
        background-color: #f8f8f8; /* 浅色行 */
    }

    .my-table .ant-table-tbody > tr:nth-child(even) > td {
        background-color: #ffffff; /* 白色行（或更深颜色） */
    }

    /* 鼠标悬停效果 */
    .my-table .ant-table-tbody > tr:hover > td {
        background-color: #e6f7ff !important; /* 悬停高亮色 */
    }

</style>

@code {


    #region 主

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadTableData();
        select = new DeviceRequest();

        Model = new StackerConfig { Tunnle = 1 };
        Properties = Model.GetType().GetProperties();
    }

    DeviceRequest select;
    DeviceModel[] data;

    async Task LoadTableData()
    {
        data = (await _DeviceService.GetDeviceListAsync()).Value.ToArray();
        Initialize();
    }

    bool DrawerVisible;

    void TaskDetailPanelOpen()
    {
        DrawerVisible = true;
    }

    void TaskDetailPanelClose()
    {
        DrawerVisible = false;
    }

    async Task Commit()
    {
        select.DeviceType = DeviceSelectValue;
        select.Config = Model;
        var result = await _DeviceService.CreatDeviceAsync(select);
        if (result.IsSuccess)
        {
            _message.Success("Sucess");
        }
        else
        {
            _message.Error(result.Message);
        }
    }

    #endregion


    #region 下拉

    string DeviceSelectValue { get; set; }
    List<CascaderNode> deviceOptions;


    void Initialize()
    {
        deviceOptions = new List<CascaderNode>();
        deviceOptions.Add(new CascaderNode
        {
            Label = "入库口",
            Value = "StockPortIn"
        });
        deviceOptions.Add(new CascaderNode
        {
            Label = "出库口",
            Value = "StockPortOut"
        });
        deviceOptions.Add(new CascaderNode
        {
            Label = "堆垛机取货口",
            Value = "StackerInTranShip"
        });
        deviceOptions.Add(new CascaderNode
        {
            Label = "堆垛机放货口",
            Value = "StackerOutTranShip"
        });
        deviceOptions.Add(new CascaderNode
        {
            Label = "堆垛机",
            Value = "Stacker"
        });
    }

    void OnChange(CascaderNode[] selectedNodes)
    {
        Properties = null;
        Console.WriteLine($"value: {DeviceSelectValue} selected: " +
                          $"{string.Join(",", selectedNodes.Select(x => x.Value))}");
        if (DeviceSelectValue == "StockPortIn" || DeviceSelectValue == "StockPortOut")
        {
            Model = new StockPortConfig();
        }
        else if (DeviceSelectValue == "StackerInTranShip" || DeviceSelectValue == "StackerOutTranShip")
        {
            Model = new StckerTranShipConfig();
        }
        else if (DeviceSelectValue == "Stacker")
        {
            Model = new StackerConfig();
        }

        Properties = Model.GetType().GetProperties();
    }

    [Parameter] [EditorRequired] public object? Model { get; set; }
    [Parameter] [EditorRequired] public PropertyInfo[]? Properties { get; set; }

    private string GetValue(PropertyInfo property)
    {
        var value = property?.GetValue(Model);
        return value.ToString();
    }

    private void OnChanged(ChangeEventArgs e, PropertyInfo property)
    {
        if (property.PropertyType != typeof(string))
        {
            var value = Convert.ChangeType(e, property.PropertyType);
            property.SetValue(Model, value);
        }
        else
        {
            property.SetValue(Model, e.Value);
        }
    }

    #endregion

}