@page "/"
@using AntDesign.TableModels
@using UI.Model.Home
@using UI.Service.HomeService
@inject IMessageService _message;
@inject IHomeService _homeService;
<PageTitle>Home</PageTitle>

<div>
    <Row Style="display: flex; justify-content: space-between; margin:5px">

        <AntDesign.Col >
            <Button Type="ButtonType.Primary" Style="margin-top:20px" @onclick="_ => LoadTableData()">重新加载</Button>
        </AntDesign.Col>
        <AntDesign.Col Span="3">
            <Text>任务号</Text>
            <Input Placeholder="请输入" TValue="string"/>
        </AntDesign.Col>

        <AntDesign.Col Span="3">
            <Text>流水号</Text>
            <Input Placeholder="请输入" TValue="string"/>
        </AntDesign.Col>

        <AntDesign.Col >
            <DatePicker TValue="DateOnly?" Picker="DatePickerType.Date" Style="margin-top:20px"/>
        </AntDesign.Col>

        <AntDesign.Col Style="float:right;margin:5px">
            <Row>
                <Button Type="ButtonType.Primary">查询</Button>
            </Row>
            <Row Style="margin-top:5px">
                <Button Type="ButtonType.Primary">重置</Button>
            </Row>
        </AntDesign.Col>
    </Row>
    <Row Style="display: flex; flex-direction: column; height: calc(100vh - 100px);">
        <Table DataSource="data" PageSize="10" ScrollX="2000" StickyOffsetHeader="64" @ref="_table" OnRowClick="_rowClickCallback" Class="my-table">
            <PropertyColumn Property="c => c.TaskCode" Width="200" Fixed="ColumnFixPlacement.Left" Title="任务号"/>
            <PropertyColumn Property="c => c.SerialNumber" Width="120" Fixed="ColumnFixPlacement.Left" Title="流水号"/>
            <PropertyColumn Property="c => c.TaskTypeDesc" Width="120" Title="任务类型"/>
            <PropertyColumn Property="c => c.ExecuteDesc" Width="120" Title="步骤说明"/>
            <PropertyColumn Property="c => c.TaskStatusDesc" Width="120" Title="任务状态"/>
            <PropertyColumn Property="c => c.Description" Width="160" Title="任务描述"/>
            <PropertyColumn Property="c => c.GetTunnel" Width="70" Title="取货巷道"/>
            <PropertyColumn Property="c => c.GetFloor" Width="70" Title="取货层"/>
            <PropertyColumn Property="c => c.GetRow" Width="70" Title="取货排"/>
            <PropertyColumn Property="c => c.GetColumn" Width="70" Title="取货列"/>
            <PropertyColumn Property="c => c.PutTunnel" Width="70" Title="放货巷道"/>
            <PropertyColumn Property="c => c.PutFloor" Width="70" Title="放货层"/>
            <PropertyColumn Property="c => c.PutRow" Width="70" Title="放货排"/>
            <PropertyColumn Property="c => c.PutColumn" Width="70" Title="放货列"/>
            <PropertyColumn Property="c => c.CreationTime" Width="168" Title="创建时间"/>
        </Table>
    </Row>
</div>

<div>
    <Drawer Closable="true" Width="420" Visible="TaskDetailVisible" Title='"任务面板"' OnClose="_ => TaskDetailPanelClose()">
        <Template style="height:90%">
            <Row Gutter="18">
                <AntDesign.Col Span="12">
                    <Text>任务号：</Text>
                    <a>@SelectTaskModel?.TaskCode</a>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>流水号：</Text>
                    <a>@SelectTaskModel?.SerialNumber</a>
                </AntDesign.Col>
            </Row>
            <br/>
            <Row Gutter="18">
                <AntDesign.Col Span="12">
                    <Text>取货巷道：</Text>
                    <a>@SelectTaskModel?.GetTunnel</a>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>取货排：</Text>
                    <a>@SelectTaskModel?.GetRow</a>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>取货列：</Text>
                    <a>@SelectTaskModel?.GetColumn</a>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>取货层：</Text>
                    <a>@SelectTaskModel?.GetFloor</a>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>取货深度：</Text>
                    <a>@SelectTaskModel?.GetDepth</a>
                </AntDesign.Col>
            </Row>
            <br/>
            <Row Gutter="18">
                <AntDesign.Col Span="12">
                    <Text>放货巷道：</Text>
                    <a>@SelectTaskModel?.PutTunnel</a>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>放货排：</Text>
                    <a>@SelectTaskModel?.PutRow</a>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>放货列：</Text>
                    <a>@SelectTaskModel?.PutColumn</a>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>放货层：</Text>
                    <a>@SelectTaskModel?.PutFloor</a>
                </AntDesign.Col>
                <AntDesign.Col Span="12">
                    <Text>放货深度：</Text>
                    <a>@SelectTaskModel?.PutDepth</a>
                </AntDesign.Col>
            </Row>
            <br/>
            <Row Gutter="15">
                <div>
                    <Cascader Options="@options" @bind-Value="SelectValue" ChangeOnSelect="true" SelectedNodesChanged="OnChange"></Cascader>
                </div>
            </Row>
            <br/>
            <Row>
                <AntDesign.Col Span="18">

                </AntDesign.Col>
                <AntDesign.Col Span="6">
                    <Button Type="ButtonType.Default">Cancel</Button>
                    <Button Type="ButtonType.Primary">提交</Button>
                </AntDesign.Col>
            </Row>
        </Template>
    </Drawer>
</div>


<style>
    /* 在 wwwroot/css/site.css 或组件样式部分添加 */
    .my-table .ant-table-tbody > tr:nth-child(odd) > td {
        background-color: #f8f8f8; /* 浅色行 */
    }

    .my-table .ant-table-tbody > tr:nth-child(even) > td {
        background-color: #ffffff; /* 白色行（或更深颜色） */
    }

    /* 鼠标悬停效果 */
    .my-table .ant-table-tbody > tr:hover > td {
        background-color: #e6f7ff !important; /* 悬停高亮色 */
    }

</style>

@code {


    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        _rowClickCallback = EventCallback.Factory.Create<RowData<WcsTaskModel>>(this, SelectRowCallback);
        await LoadTableData();
        await LoadTaskExecuteList();
        base.OnInitializedAsync();
    }

    #region table

    ITable _table;

    WcsTaskModel? SelectTaskModel { get; set; }
    WcsTaskModel[] data;

    EventCallback<RowData<WcsTaskModel>> _rowClickCallback;


    private async Task LoadTableData()
    {
        data = await _homeService.GetTasksAsync();
        _message.Success("Table data loaded successfully!");
    }

    private void SelectRowCallback(RowData<WcsTaskModel> rowData)
    {
        SelectTaskModel = rowData.Data;
        TaskDetailPanelOpen();
    }

    #endregion

    #region 抽屉

    bool TaskDetailVisible;

    void TaskDetailPanelOpen()
    {
        TaskDetailVisible = true;
    }

    void TaskDetailPanelClose()
    {
        TaskDetailVisible = false;
    }

    #region 下拉

    string SelectValue { get; set; }
    List<CascaderNode> options;

    void OnChange(CascaderNode[] selectedNodes)
    {
        Console.WriteLine($"value: {SelectValue} selected: " +
                          $"{string.Join(",", selectedNodes.Select(x => x.Value))}");
    }

    /// <summary>
    ///     执行步骤列表
    /// </summary>
    async Task LoadTaskExecuteList()
    {
        options = new List<CascaderNode>();
        var executeSteps = await _homeService.GetExecutesAsync();
        foreach (var item in executeSteps)
        {
            options.Add(new CascaderNode
            {
                Label = item.ExecuteName,
                Value = item.ExecuteName
            });
        }
    }

    #endregion

    #endregion

}